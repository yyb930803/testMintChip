{"version":3,"file":"static/chunks/pages/sign-up-1e3c25a889ca2ac1.js","mappings":"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","sources":["webpack://_N_E/?62be","webpack://_N_E/./pages/sign-up/index.tsx","webpack://_N_E/./utils/validation.ts","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/sign-up\",\n      function () {\n        return require(\"private-next-pages/sign-up/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/sign-up\"])\n      });\n    }\n  ","import React, { useState } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport { ButtonLoading } from '@react-page/editor';\r\nimport VerificationModal from '../../components/VerificationModal';\r\nimport GoogleLogin from 'react-google-login';\r\nimport { toast } from 'react-toastify';\r\nimport { ActionType, useStateContext } from '../../state';\r\nimport { emailValidation } from '../../utils/validation';\r\n\r\nconst SignUpPage = () => {\r\n  const {\r\n    state: { user, token },\r\n    dispatch,\r\n  } = useStateContext();\r\n  const router = useRouter();\r\n  const [show, setShow] = useState(false);\r\n  const [password, setPassword] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [emailSignUpLoading, setEmailSignUpLoading] = useState(false);\r\n  const [googleSignUpLoading, setGoogleSignUpLoading] = useState(false);\r\n  const [isVerifyPage, setIsVerifyPage] = useState(false);\r\n  const [isValidation, setIsValidation] = useState(false);\r\n  const [firstname, setFirstname] = useState('');\r\n  const [lastname, setLastname] = useState('');\r\n\r\n  const validation = () => {\r\n    if (\r\n      password !== '' &&\r\n      firstname !== '' &&\r\n      lastname !== '' &&\r\n      emailValidation(email)\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const emailSignUp = async () => {\r\n    setIsValidation(true);\r\n    setEmailSignUpLoading(true);\r\n    const val_result = validation();\r\n    if (val_result) {\r\n      const options = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          email: email,\r\n          password: password,\r\n          firstname: firstname,\r\n          lastname: lastname,\r\n        }),\r\n      };\r\n\r\n      try {\r\n        await fetch(\r\n          `${process.env.NEXT_PUBLIC_SERVER_API_URL}/auth/signup`,\r\n          options\r\n        )\r\n          .then((res) => res.json())\r\n          .then((res) => {\r\n            if (res.code === 200) {\r\n              setIsVerifyPage(true);\r\n            } else {\r\n              toast.error(res.message);\r\n            }\r\n            setEmailSignUpLoading(false);\r\n          });\r\n      } catch (error) {\r\n        toast.error('Network Error!');\r\n        setEmailSignUpLoading(false);\r\n      }\r\n    } else {\r\n      setEmailSignUpLoading(false);\r\n    }\r\n  };\r\n\r\n  const googleSignUp = async (response: any) => {\r\n    setGoogleSignUpLoading(true);\r\n    const access_token = response.accessToken;\r\n    const options = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ access_token }),\r\n    };\r\n\r\n    try {\r\n      await fetch(\r\n        `${process.env.NEXT_PUBLIC_SERVER_API_URL}/auth/oauth/google`,\r\n        options\r\n      )\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          if (res.code === 200) {\r\n            dispatch({\r\n              type: ActionType.UPDATE_USER,\r\n              payload: res.data,\r\n            });\r\n            dispatch({\r\n              type: ActionType.UPDATE_TOKEN,\r\n              payload: res.data.token,\r\n            });\r\n            router.push('/home');\r\n          } else {\r\n            toast.error(res.message);\r\n          }\r\n        });\r\n    } catch (error) {\r\n      toast.error('Network Error!');\r\n    }\r\n  };\r\n\r\n  const goSignIn = () => {\r\n    router.push({\r\n      pathname: '/sign-in',\r\n    });\r\n  };\r\n\r\n  if (isVerifyPage === true) {\r\n    return (\r\n      <VerificationModal email={email} setIsVerifyPage={setIsVerifyPage} />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"flex w-full items-center justify-center h-[100vh]\"\r\n      style={{ fontFamily: 'RocGrotesk-Regular' }}\r\n    >\r\n      <div className=\"flex flex-col w-[400px] h-fit bg-alpha-10 rounded-[15px] p-[30px] gap-[20px]\">\r\n        <div className=\"flex items-center justify-center w-full\">\r\n          <img\r\n            className=\"w-[130px] shrink-0 object-cover\"\r\n            src=\"/images/mintchip-beta-logo.png\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <div className=\"text-gray-2 text-[18px] font-bold\">\r\n            Create your account\r\n          </div>\r\n          <div className=\"text-gray-1 text-[16px]\">to continue to MINTCHIP</div>\r\n        </div>\r\n        <div className=\"flex flex-col gap-[10px]\">\r\n          {/* <div>\r\n            <GoogleLogin\r\n              clientId={process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID || ''}\r\n              buttonText=\"Sign up with Google\"\r\n              onSuccess={googleSignUp}\r\n              render={(renderProps) => (\r\n                <button\r\n                  onClick={() => renderProps.onClick()}\r\n                  className=\"group flex flex-row items-center justify-between w-full bg-transparent border-solid border-gray-1 border-[1px] px-[20px] text-gray-2 rounded-[5px] h-[40px] hover:bg-alpha-10 down active:border-white\"\r\n                >\r\n                  <div className=\"flex flex-row items-center justify-start w-full gap-[20px]\">\r\n                    <img\r\n                      className=\"w-[16px]\"\r\n                      src=\"https://images.clerk.dev/static/google.svg?width=160\"\r\n                      alt=\"\"\r\n                    />\r\n                    Continue with Google\r\n                  </div>\r\n                  <div className=\"flex flex-row items-center opacity-0 group-hover:opacity-100 w-[16px] h-[16px] group-hover:right-0\">\r\n                    {googleSignUpLoading === true ? (\r\n                      <ButtonLoading />\r\n                    ) : (\r\n                      <img\r\n                        className=\"relative w-full shrink-0\"\r\n                        src=\"/images/vuesaxoutlinearrowright2.svg\"\r\n                      />\r\n                    )}\r\n                  </div>\r\n                </button>\r\n              )}\r\n            />\r\n          </div> */}\r\n          {/* <div className=\"inline-flex items-center justify-center w-full\">\r\n            <hr className=\"w-full h-px my-8 bg-gray-1 border-[1px]\" />\r\n            <span className=\"px-3 font-medium text-gray-900 -translate-x-1/2 left-1/2 text-gray-1\">\r\n              or\r\n            </span>\r\n            <hr className=\"w-full h-px my-8 bg-gray-1 border-[1px]\" />\r\n          </div> */}\r\n          <div className=\"flex flex-col gap-[20px]\">\r\n            <div className=\"flex flex-row items-center justify-center w-full gap-[10px]\">\r\n              <div className=\"flex flex-col gap-[3px] w-full\">\r\n                <label className=\"text-[14px] text-gray-2\" htmlFor=\"\">\r\n                  First name\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={firstname}\r\n                  onChange={(e) => setFirstname(e.target.value)}\r\n                  className={\r\n                    'w-full bg-transparent focus:outline-none focus:border-white border-gray-1 border-[1px] border-solid rounded-[5px] h-[40px] px-[15px] text-gray-2' +\r\n                    (isValidation === true && firstname === ''\r\n                      ? ' border-red border-solid border-[1px]'\r\n                      : '')\r\n                  }\r\n                />\r\n              </div>\r\n              <div className=\"flex flex-col gap-[3px] w-full\">\r\n                <label className=\"text-[14px] text-gray-2\" htmlFor=\"\">\r\n                  Last name\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={lastname}\r\n                  onChange={(e) => setLastname(e.target.value)}\r\n                  className={\r\n                    'w-full bg-transparent focus:outline-none focus:border-white border-gray-1 border-[1px] border-solid rounded-[5px] h-[40px] px-[15px] text-gray-2' +\r\n                    (isValidation === true && lastname === ''\r\n                      ? ' border-red border-solid border-[1px]'\r\n                      : '')\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex flex-col gap-[3px]\">\r\n              <label className=\"text-[14px] text-gray-2\" htmlFor=\"\">\r\n                Email address\r\n              </label>\r\n              <input\r\n                type=\"email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                className={\r\n                  'bg-transparent focus:outline-none focus:border-white border-gray-1 border-[1px] border-solid rounded-[5px] h-[40px] px-[15px] text-gray-2' +\r\n                  (isValidation === true && emailValidation(email) === false\r\n                    ? ' border-red border-solid border-[1px]'\r\n                    : '')\r\n                }\r\n              />\r\n            </div>\r\n\r\n            <div className=\"flex flex-col gap-[3px]\">\r\n              <label className=\"text-[14px] text-gray-2\" htmlFor=\"\">\r\n                Password\r\n              </label>\r\n              <div className=\"flex relative\">\r\n                <input\r\n                  value={password}\r\n                  type={show ? 'text' : 'password'}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                  className={\r\n                    'bg-transparent focus:outline-none focus:border-white border-gray-1 border-[1px] border-solid rounded-[5px] w-full h-[40px] pl-[15px] pr-[35px] text-gray-2' +\r\n                    (isValidation === true && password === ''\r\n                      ? ' border-red border-solid border-[1px]'\r\n                      : '')\r\n                  }\r\n                />\r\n                <div className=\"absolute h-full flex items-center right-[10px]\">\r\n                  <button\r\n                    onClick={() => setShow(!show)}\r\n                    className=\"flex items-center focus:outline-none bg-transparent w-[20px] h-[20px] p-0\"\r\n                  >\r\n                    {show === true ? (\r\n                      <svg\r\n                        className=\"w-6 h-6\"\r\n                        fill=\"none\"\r\n                        stroke=\"white\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                      >\r\n                        <path\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          strokeWidth=\"2\"\r\n                          d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"\r\n                        ></path>\r\n                        <path\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          strokeWidth=\"2\"\r\n                          d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\"\r\n                        ></path>\r\n                      </svg>\r\n                    ) : (\r\n                      <svg\r\n                        className=\"w-6 h-6\"\r\n                        fill=\"none\"\r\n                        stroke=\"gray\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                      >\r\n                        <path\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          strokeWidth=\"2\"\r\n                          d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21\"\r\n                        ></path>\r\n                      </svg>\r\n                    )}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"\">\r\n              <button\r\n                onClick={() => emailSignUp()}\r\n                className=\"flex items-center justify-center w-full bg-primary-blue text-gray-2 rounded-[5px] h-[40px] hover:bg-primary-blue-hover active:border-solid border-white border-[1px]\"\r\n              >\r\n                {emailSignUpLoading === true ? <ButtonLoading /> : 'CONTINUE'}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex flex-row items-center justify-start\">\r\n          <div className=\"text-gray-1 text-[14px]\">Have an account?</div>\r\n          &nbsp;\r\n          <div\r\n            onClick={() => goSignIn()}\r\n            className=\"text-primary-blue text-[14px] hover:cursor-pointer hover:underline\"\r\n          >\r\n            Sign in\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUpPage;\r\n","export function emailValidation(email: string) {\r\n  if (/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n"],"names":["window","__NEXT_P","push","__webpack_require__","SignUpPage","state","user","token","dispatch","useStateContext","router","useRouter","show","setShow","useState","password","setPassword","email","setEmail","emailSignUpLoading","setEmailSignUpLoading","googleSignUpLoading","setGoogleSignUpLoading","isVerifyPage","setIsVerifyPage","isValidation","setIsValidation","firstname","setFirstname","lastname","setLastname","validation","emailValidation","emailSignUp","val_result","options","method","headers","body","JSON","stringify","fetch","concat","process","then","res","json","code","toast","message","error","goSignIn","pathname","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","VerificationModal","div","className","style","fontFamily","jsxs","img","src","label","htmlFor","input","type","value","onChange","e","target","button","onClick","svg","fill","stroke","viewBox","xmlns","path","strokeLinecap","strokeLinejoin","strokeWidth","d","ButtonLoading","__webpack_exports__","test"],"sourceRoot":""}